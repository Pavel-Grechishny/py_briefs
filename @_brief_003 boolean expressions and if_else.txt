================================================================================================

00_00 Работа с GitHub (token)
    Для команд pull и push всегда добавлять origin main

================================================================================================

00_29 Операторы сравнения

    Всего операторов сравнения - 6 (==, !=, >, <, >=, <=)
    Все операторы сравнения возвращают объект типа bool (True, False)
    
    '==' - проверка на равенство
    '!=' - проверка на неравенство
    '>'  - проверка строго больше
    '<'  - проверка строго меньше
    '>=' - проверка больше либо равно
    '<=' - проверка меньше либо равно
    
    1 == 1   - True (когда левый и правый операнды равны как значения
    1 == 1.0 - True (int(1) == float(1.0)) - равенство значений
    
    Операнд - выражение слева и справа от БИНАРНОГО (двухместного) оператора.

    1 + 5 == 2.5 + 3.5 - True (! приоритет: вычисляется 6 == 6.0)
    
    Все математические операторы по приритету выше, чем операторы сравнения
    У всех операторов сравнения приоритет одинаковый
    
    1 != 1 - False (возвращает True если операнды не равны)
    
    2 > 2 - False
    2 > 1 - True
    2 >= 2 - True
    2 < 3 - True
    2 >= 3 - False
    
    При помощи операторов сравнения получам условные выражения
    Используются в условных конструкциях, там где оператор ожидает получить 
    объект логического типа (boll) - if_elif, while, либо в функции
    
    * Выражение может быть вычислено
    
    prompt = 'введите число: '
    n, m = int(input(prompt)), int(input(prompt))
    
    n_m = n > m
    
    print(n_m) (после вычисления n_m будет ссылаться на True либо False)
    int(n_m) - 1 либо 0
    
================================================================================================

00_52 Условные конструкции (if)

    Условных конструкций несколько:
    
00_53 - 1. Инструкция if_elif_else
    
    if (ожидает bool, если будет объект другого типа, то он будет проверен на истинность) 
        
    a = 5
    if a: Объект int(a) будет проверен на истинность (bool(a), bool(5) == 1)
    
    if bool(a): - явная проверка на истинность
    if a:       - интерпритатор неявным образом осуществляет проверку на истинность
        
    text = '' - получаем текст из файла, либо input, либо ....
    if text: - (text == '' получим False) (text = ' ' получим True, если есть хотябы 1 символ)
        
    if 1 == 1 (логическое (сравнительное) выражение)
    if 'python'.isalpha() - метод также возвращает логическое True либо False
        
    Заголовок блоковой конструкции - это первая строчка конструкции (if text_1 == text_2:)
    Блок возникат под соответсвужим заголовком

01_04 - Блоки, отступы

    if 1 == 1: - 0-й уровень начало блоковой конструкции
        print('1') 1-й уровень (отступ несколько пробелов или табуляции)
         print('ошибка отступа') - !!! соблюдай уровни отступов - стандарт 4 пробела для .py
    Блок закончился
    Двоеточие ':' в конце строки (заголовка) означает что дальше идет тело блочной конструкции
    После заголовка обязательно должен быть написан блок
  ! pass заглушка блока (и не собираемся писать) или '...' заглушка (акцент к возврату и добавлению кода)
    Пробел предпочтительнее, перед табуляцией. Смешивать пробелы и табуляцию нельзя и плохо.
    Командная строка не умеет подменять символы пробела.
        
    
00-
    
    2. Тернарный (условный) оператор

================================================================================================

Другое полезное
    
   Перегрузка оператора (когда один и тот же оператор с объектами разных типов данных ведет себя по разному).
   Например оператор '+' с объектами int(сложение), с str(конкатенация).
   
   
   
   
   
   