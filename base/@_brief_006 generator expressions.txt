==========================================================================================

00_01 - генераторные выражения

    Объект генератор - итерируемый объект который может быть вычислен только единожды
    второй итерации нет (итерация только одна)
    Генератор дополнительный инструмент - для ситуаций, когда хранение объектов становится затратным.
    Позволяет более эффективно использовать память. 
    Элементы генератора не хранятся в памяти, а вычисляются на каждой итерации.
  ! Краткая форма записи циклов
  
    numbers = [20, 14, 53, 33, 28]
    average = sum(numbers) / len(numbers)
    
    Составляем генераторное выражение
  
    generator = (n / average for n in numbers) - полyчаем объект генератор class 'generator' (скобки*)
    
    print(*generator) - распаковка итерируемого объекта в функцию, с произвольным количеством аргументов
    
  ! print(numbers[0], numbers[1], numbers[2], numbers[3], numbers[4])
    print(*numbers)
    
    
    >>> nums = [20,30,40,50,60]
    >>> avg = sum(nums) / len(nums)
    >>> gen = (n / avg for n in nums)
    >>> norm = list(gen)
    >>> print(norm)
    [0.5, 0.75, 1.0, 1.25, 1.5] - получили список хранящихся в памяти объектов


  ! generator = (n / average for n in numbers) - генератор не сохранит в памяти объекты
    
                [n / average for n in numbers] - представление списка. сохранит объкты в памяти
    
    
    Пример нахождения минимального - без сохраниения объектов в памяти
    print(min(n / average for n in numbers))
    
===================================================================================================================

00_42 - работа со строками

    words = ['кот', 'пёс', 'черепаха', 'лис', 'ворон']
    
    min(len(word) for word in words)
    max(len(word) for word in words)
    
    abbr = ''.join(w[0].upper() for w in words)
    
    
    Как составить пары:
     
    fruits = ('pear', 'melon', 'peach', 'citron', 'lime')
    colors = ('green', 'yellow', 'orange', 'light-yellow', 'yellow-green')
    
    colored_fruits_list = '\n'.join(
        f'{colors[i]} {fruits[i]}'
        for i in range(min(len(fruits), len(colors)))
    )
    
    colored_fruits_list = '\n'.join(
        f'{color} {fruit}'
        for color, fruit in zip(colors, fruits))
    )

===================================================================================================================
    
01_13 - функция zip() возвращает class 'zip'

  ! Генератор
  ! Итерируется 1 раз

    >>> fruits = ('pear', 'melon', 'peach', 'citron', 'lime')
    >>> colors = ('green', 'yellow', 'orange', 'light-yellow', 'yellow-green')
    >>> fc =zip(colors, fruits)
    >>> lfc = list(fc)
    >>> print(lfc)
    [('green', 'pear'), ('yellow', 'melon'), ('orange', 'peach'), ('light-yellow', 'citron'), ('yellow-green', 'lime')]
    >>> lfc
    [('green', 'pear'), ('yellow', 'melon'), ('orange', 'peach'), ('light-yellow', 'citron'), ('yellow-green', 'lime')]
    >>> fc
    <zip object at 0x0000022E686EB000>
    >>> type(fc)
    <class 'zip'>
    >>> lfc = list(fc)
    >>> lfc
    []
    >>>
    
===================================================================================================================

!!! файл - _word_counts.py
    
01_42 - split() + символы пустого пространства

01_49 - rstrip('abc')  

    lower()
    
01_59 - уникальные слова

02_05 - count() - подсчет

02_07 - sorted() - сортировка

02_11 - переписываем код файла в явные циклы и с использованием генераторов

02_15 - моржевый оператор - выполняет присваивание и ВОЗВРАЩАЕТ объект сразу

===================================================================================================================

!!! файл - _table_print.py
  
02_36 - Вывод таблицы в stdout

02_38 - строки таблицы '\n'.join()

02_41 - самое длинное слово 

02_43 - ljust() выравние по самому длинному слову 1-й колонки

02_44 - самое длинное слово во второй колонке

02_46 - center() - выравнивание по центру (строковый метод)

02_47 - выравнивание при помощи f-строк

02_49 - дополнительно вычисление ширин при помощи zip()

   
===================================================================================================================

Другое полезное

    enumerate - возвращает объект-генертор