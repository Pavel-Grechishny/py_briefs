===========================================================================

00_00 - РАБОТА С ПУТЯМИ

===========================================================================

00_04 - Пути абсолютные и относительные

    D:\temp\home\2023\2023.08.25.py - абсолютный (от корня D:)
    cd ..\home\2023\2023.08.25.py - относительный путь (от "точки")
    
    В системе путей всегда имется единый корень
    
  # абсолютные пути
  # система posix
    UNIX - / (/mount/python/home/.../1.py) - отдельных букв D: нет
  # система nt
    WINDOWS - (D:\mount\python\home\...\1.py) - D: корень
    
===========================================================================
    
  # Экранирование \
    'D:\\mount\\python\\home\\...\\1.py'
    
  # r-строки (предпочительнее для путей)
    r'D:\mount\python\home\...\1.py' - не нужно экранировать
    
===========================================================================

00_27 - решение проблем с путями (корни и разделители)

  ! Стараться использовать относительные пути
  
    1. Модули стандартной библиотеки - os, sys
    
    os.name - свеления об операционной системе (posix, nt, java)
    
    from os import name
    print(name)
    
    
    >>> from os import name
    >>> if name == 'nt':
    ...     PATH_SPLITTER = '\\'
    ... else:
    ...     PATH_SPLITTER = '/'
    ...
    
    >>> from sys import path
    >>> print(*path, sep='\n')

    C:\Python311\python311.zip - текущий каталог в котором выполняется скрипт
    C:\Python311\DLLs
    C:\Python311\Lib
    C:\Python311
    C:\Python311\Lib\site-packages
    
  ! CWD - текщий рабочий каталог - current working directory
  
    file_name = 'myfile.py'
    file_path = PATH_SPLITTER.join((path[0], file_name))
    
    print(file_path)
  
  ! файл - scripts/path1.py
  
=============================================================================

00_43 - pathlib (scripts/path2)
  
  2 Модуль стандартной библиотеки pathlib - средства для работы с путями
  
    from pathlib import Path
    from sys import path
    
    (Path - не path) - два разных объекта
    
    file_path = Path(path[0]) / 'file.py'
    
==============================================================================

00_59 - извлечение компонетов из file_path = Path(path[0]) - проверки

    file_path.name - имя конечного компонента нашего пути
    file_path.parent - родительский путь к файла
    file_path.parents - все пути к файлу до корня
    file_path.suffix - расширение файла | или '' [пусто]
    file_path.is_dir() - проверка на каталог (обращение к ФС) - True | False
    file_path.is_file() - проверка на файл (обращение к ФС) - True | False
    file_path.exists() - проверка существования пути (обращение к ФС)
    file_path.stem - часть имени файла без расширения
    file_path.drive - диск
    file_path.root - '\\' - не понятно что
    file_path.anchor - корень в любой OC
    
    Path.cwd() - текущий рабочий каталог
    Path.home() - домашний каталог
    
    ... Документация

================================================================================
    
01_35 - Методы iterdir(), glob('*.txt'), rglob('*.txt')

    iterdir() - метод возвращающий содержимое каталога
  ! iterdir() - применяется к каталогу, к файлу нет
    glob(*.txt) - возвращает файла из каталога
    rglob(*.txt) - возвращает файлы из каталога и подкаталогов

  # Конструируем путь
    from pathlib import Path
    from sys import path
    
    scripts_dir = Path(path[0]).parent
  
  # Перебор всех элементов в каталоге 
    for path_ in scripts_dir.iterdir():
        if path_.is_dir() - только каталоги
            print(path_)
            
  # Перебор всех элементов в каталоге 
    for path_ in scripts_dir.glob('*.txt'): - только файлы .txt
        print(path_)
    
=================================================================================
    
01_43 - Подстановка символов (шаблоны)

    * - любое количество любых символов
    ? - ровно один символ
    [seq] - любые сиволы из группы
    [!seq] - кроме символов из группы
   
  # Шаблон для файлов с цифрами
    file_name = compire(r'\w*\d{1,2}\.py')
    
    for path_ in (scripts_dir / 'base').iterdir():
        if file_name.fullmatch(path_.name):
            print(path_.name)
            
            
==================================================================================

01_50 - РАБОТА С ФАЙЛАМИ

==================================================================================

    from pathlib import Path
    from sys import path
    
    datafile_path = Path(path[0]) / 'data'
    
  # Чтение текстового файла
    text = datafile_path.read_text(encoding='utf-8')
    
  # Запись в файл (перезапись)
    text = '\n'.join(line.strip(digits+whitespace) for line in text.strip().split('\n'))
    datafile_path.write_text(text, encoding='utf-8')
    
====================================================================================

02_09 - Режимы работы с файлами - open() (scripts/file2.py)

    from pathlib import Path
    from sys import path
    
    datafile_path = Path(path[0]) / 'data'
    
    filein = open(datafile_path, encoding='utf-8')
    filein - файлоподобный объект
    
  
  # 'r' - открывает файл на чтение
  # 'w' - на запись(перезапись)
  # 'x' - открыть только для создания файла
  # 'a' - на дозапись
  # 'b' - работа с бинарным файлом
  # 't' - работа с текстовым файлом
  # '+' - используется для комбинирования
  
=======================================================================================

02_20 - методы объектов потока
  
    from pathlib import Path
    from sys import path
    
    datafile_path = Path(path[0]) / 'data'
    
    filein = open(datafile_path, encoding='utf-8')
    
  ! filein - генератор итерируется один раз
    filein.read() - чтение всего
    filein.readline() - чтение строки
    filein.readlines() - список со строками файла
    
=======================================================================================

02_28 - закрытие потока - close()

    filein.close()
  ! высвобождает ресурсы
  
=======================================================================================

02_34 

    filein = open(datafile_path, encoding='utf-8')
    
    lines = []
    for line in filein:
        lines.append(line.strip())
        
    filein.close()
    
    
=======================================================================================

02_36 - менеджер контекста - конструкция with

    from pathlib import Path
    from sys import path
    
    datafile_path = Path(path[0]) / 'data'
    
    whis open(datafile_path, encoding='utf-8') as filein:
        text = filein.read()
        
    print(text)
    
=======================================================================================

02_41 - дозапись

    from pathlib import Path
    from sys import path
    
    datafile_path = Path(path[0]) / 'data'
    
    whis open(datafile_path, 'a', encoding='utf-8') as fileout:
        fileout.write(text)
        
=======================================================================================

02_43 - запись с помощью функции print()

    from pathlib import Path
    from sys import path
    
    datafile_path = Path(path[0]) / 'data'
    
    whis open(datafile_path, 'a', encoding='utf-8') as fileout:
        print(text, file=fileout)
