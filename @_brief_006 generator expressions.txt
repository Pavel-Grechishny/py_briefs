==========================================================================================

00_01 - генераторные выражения

    Объект генератор - итерируемый объект который может быть вычислен только единожды
    второй итерации нет (итерация только одна)
    Генератор дополнительный инструмент - для ситуаций, когда хранение объектов становится затратным.
    Позволяет более эффективно использовать память. 
    Элементы генератора не хранятся в памяти, а вычисляются на каждой итерации.
  ! Краткая форма записи циклов
  
    numbers = [20, 14, 53, 33, 28]
    average = sum(numbers) / len(numbers)
    
    Составляем генераторное выражение
  
    generator = (n / average for n in numbers) - полyчаем объект генератор class 'generator' (скобки*)
    
    print(*generator) - распаковка итерируемого объекта в функцию, с произвольным количеством аргументов
    
  ! print(numbers[0], numbers[1], numbers[2], numbers[3], numbers[4])
    print(*numbers)
    
    
    >>> nums = [20,30,40,50,60]
    >>> avg = sum(nums) / len(nums)
    >>> gen = (n / avg for n in nums)
    >>> norm = list(gen)
    >>> print(norm)
    [0.5, 0.75, 1.0, 1.25, 1.5] - получили список хранящихся в памяти объектов


  ! generator = (n / average for n in numbers) - генератор не сохранит в памяти объекты
    
                [n / average for n in numbers] - представление списка. сохранит объкты в памяти
    
    
    Пример нахождения минимального - без сохраниения объектов в памяти
    print(min(n / average for n in numbers))
    
===================================================================================================================

00_42 - работа со строками

    words = ['кот', 'пёс', 'черепаха', 'лис', 'ворон']
    
    min(len(word) for word in words)
    max(len(word) for word in words)
    
    abbr = ''.join(w[0].upper() for w in words)
    
    
    
    
    