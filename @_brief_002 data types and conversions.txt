=================================================================================================

Типы данных базовые

=================================================================================================

00_07 - Базовые типы данных Python

    У каждого объекта в Python (все объекты) есть строковое представление.
    У каждого объекта есть класс (тип) - это одно и тоже.
    У каждого объекта есть достаточно одинаковые способы создания.
    Любой объект в python можно создать при помощи класса (универсальный способ).
    Некоторые объекты так же можно создать при помощи литералов.
    
    int(5) - создание объекта с помощью конструктора класса (функции).
    5      - создание объекта с помощью литерала (для ограниченного количества типов).
    
  1 num1 = 5 - литерал
    num1_ = int(5) - класс
    
  2 num11 = True - литерал
    num11_ = bool(0) - класс
    
  3 num2 = b'00FF12AE' - байтс объект - литерал
    num2_ = bytes('python', encoding=utf-8) - класс
    
  4 num21 = 1 + 1j - комплексные числа - литерал
    num21_ = complex(1, -5) - класс
    
  5 num3 = 3.01 - литерал
    num3_ = float(2) - класс
    
  ! итерируемые объекты - это объекты контейнеры, которые поддерживают перебор элементов
    
  6 num4 = 'python' - литерал
    num4_ = str('literal') - класс
    
  7 num5 = (7,) - кортеж из одного элемента (7) - будет int - литерал
    num5_ = tuple(1, 2) - класс
    
  8 num6 = [8] - список можно создать без запятой - литерал
    num6_ = list((0.1, 0.2, 0.3)) - класс
    
  9 num7 = {'a': 1, 'b': 2, 'c': 3} - словарь key: value - литерал
    num7_ = dict([(k, v), (k, v), (k, v)]) - класс
    
 10 num8 = {1, 2, 3} - множество - литерал
    num8_ = set(1, 2, 3) - класс
    
  ! Больше типов которые можно создать при помощи литералов НЕТ.
  ! Базовые типы написаны на C
  ! Python написан на C
  
=================================================================================================

01_07 Преобразования типов

    преобразование в int()
        
        int(True)               = 1
        int(False)              = 0
        int(3.2)                = 3 # происходит отбрасывание дробной части]
        int(-1.91)              = -1
        int('24')               = 24 # только символы '012345678' и '-' в начале: -24
        int('2.4')              = ошибка ValueError
        int('ff', base=16)      = 255 # преобразование строки к числу в любой системе счисления)
        int('11111111', base=2) = 255 # могут быть переданы только соответсвующие символы для системы счисления
        
    преобразование в float()
    
        float(1)                = 1.0
        float(True)             = 1.0 
        float(False)            = 0.0
        float('5')              = 5.0 # только символы '012345678', '-' в начале и '.'
        float('5.1')            = 5.1
        float('.25')            = 0.25
        float('35.')            = 35.0
        
    преобразование в bool() - любой объект может быть проверен на истинность (Truth Value Testing)

        0, 0.0, 0j, '', (), [], {}, set(), range(0) - приводятся к False
        Все что не перечислено выше приводится к True

  ! None - константа обозначающая отсутствие значения (машиночитаемого представления нет)
        
    проеобразование в str() - происходит обращение к строковому представлению объекта
    
=================================================================================================

01_59 Кавычки, экранирование, f-строки (создание строковых литералов)

    'Он сказал: "Терпенье и труд, всё я устал..."'  - внутри одинарных кавычек находятся двойные
    "Can't do it"                                   - внутри двойных кавычек находятся одинарные
    'He said: \"it\'s cold today\"'                 - экранированная последовательность (\n, \t)
    '\u2192'                                        - символы юникода отсутствующие на клавиатуре
    '''He said: "it's cold today"'''                - тройные кавычки (''' _ ''' / """ _ """)
    f'Text {5+3} text {6-2}'                        - f-строки
    f'{2**0.3:.2f}'                                 - f-строки (пример с мат. округлением)
  ! метод format озвучивался, но подробно не рассматривался (для сам.изучения)
 
 =================================================================================================
 
 02_29 Операторы +, -, *, /, //, %, **, divmod(n, d), конкатенация
 
    числовые объекты
        
        деление '/' всегда вернет float() - 4 / 2 = 2.0
        целочисленное деление '//' возвращает int() с отбрасыванием дробной части 5 / 2  = 2
        остаток от деления '%' возвращает int() 5 % 2 = 1
        возведение в степень '**' - 2 ** 3 = 8 - int(), 100 ** 0.5 = 10.0 float()
        divmod(7, 2) - принимает (делимое, делитель) - возвращает кортеж (3, 1)
        
    строки (конкатенация)  
        
        '12' + '34' = '1234'
        '12' * int(3) = '121212' - умножение поддерживается только на int()
        смешивание нескольких типов не поддерживается.
        
    приоритет:
        
        1 **
        2 +x, -x
        3 *, /, //, %
        4 +, -
        
!Doc 6.17 - Operator precedence - Документация, таблица приоритета операторов